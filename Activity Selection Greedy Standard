// C++ program for activity selection problem
// when input activities may not be sorted.
#include <bits/stdc++.h>
using namespace std;

// Function to solve the activity selection problem
int activitySelection(vector<int> &start, vector<int> &finish)
{

    // to store results.
    int maxactivity = 0;

    // to store the activities
    vector<vector<int>> arr;

    for (int i = 0; i < start.size(); i++)
    {
        arr.push_back({finish[i], start[i]});
    }

    // sort the activities based on finish time
    sort(arr.begin(), arr.end());

    // to store the end time of last activity
    int finishtime = -1;

    for (int i = 0; i < arr.size(); i++)
    {
        vector<int> activity = arr[i];

        if (activity[1] > finishtime)  //if finishing time of current activity is greater then the finish time of the last activity then, 
        //it needs to be included in the current process,so modification of finish time is done by the larger finish time
        {
            finishtime = activity[0];
            ans++;
        }
    }
    return ans;
}

int main()
{
    vector<int> start = {1, 3, 0, 5, 8, 5};
    vector<int> finish = {2, 4, 6, 7, 9, 9};
    cout << activitySelection(start, finish);
    return 0;
}
