/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

public:
int sum=0;
    int maxDEPTH(TreeNode* node)
    {
        if(node==NULL)
        {
            return 0;
        }
        return(1+max(maxDEPTH(node->left),maxDEPTH(node->right)));

    }
    void findsum(TreeNode*node,int curr,int depth)
    {
        
        if(node!=NULL)
        {
            if(curr==depth)
            {
                sum+=node->val;
            }
            findsum(node->left,curr+1,depth);
             findsum(node->right,curr+1,depth);
        }
    }
    
    int deepestLeavesSum(TreeNode* root) {
        int maxdepth=maxDEPTH(root);
        findsum(root,1,maxdepth);
        return sum;
    }
};
